package zip

import (
	"testing"

	"github.com/spf13/afero"
)

func TestReadDirectoryFailures(t *testing.T) {
	appFs := afero.NewMemMapFs()
	var testcases = []struct {
		name      string
		expectErr bool
		data      []byte
	}{
		{"WellFormed", false, []byte("\x50\x4b\x03\x04\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x54\x65\x73\x74\x42\x6f\x64\x79\x50\x4b\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x01\x00\x20\x00\x00\x00\x00\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x50\x4b\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00\x36\x00\x00\x00\x2e\x00\x00\x00\x00\x00")},
		{"WellFormedWithComment", false, []byte("\x50\x4b\x03\x04\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x54\x65\x73\x74\x42\x6f\x64\x79\x50\x4b\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x01\x00\x20\x00\x00\x00\x00\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x50\x4b\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00\x36\x00\x00\x00\x2e\x00\x00\x00\x07\x00\x43\x6f\x6d\x6d\x65\x6e\x74")},
		{"CommentLengthTooBig", true, []byte("\x50\x4b\x03\x04\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x54\x65\x73\x74\x42\x6f\x64\x79\x50\x4b\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x01\x00\x20\x00\x00\x00\x00\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x50\x4b\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00\x36\x00\x00\x00\x2e\x00\x00\x00\x08\x00\x43\x6f\x6d\x6d\x65\x6e\x74")},
		{"NoEndOfDirSignature", true, []byte("\x50\x4b\x03\x04\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x54\x65\x73\x74\x42\x6f\x64\x79\x50\x4b\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x01\x00\x20\x00\x00\x00\x00\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x50\x4b\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x36\x00\x00\x00\x2e\x00\x00\x00\x00\x00")},
		{"TooShortForEndOfDirRecord", true, []byte("\x50\x4b\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00\x36\x00\x00\x00\x2e\x00\x00\x00\x00")},
		{"CentralDirOffsetTooBig", true, []byte("\x50\x4b\x03\x04\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x54\x65\x73\x74\x42\x6f\x64\x79\x50\x4b\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x01\x00\x20\x00\x00\x00\x00\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x50\x4b\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00\x36\x00\x00\x00\x7a\x00\x00\x00\x00\x00")},
		{"NoCentralDirSignature", true, []byte("\x50\x4b\x03\x04\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x54\x65\x73\x74\x42\x6f\x64\x79\x50\x4b\x00\x00\x14\x00\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x01\x00\x20\x00\x00\x00\x00\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x50\x4b\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00\x36\x00\x00\x00\x2e\x00\x00\x00\x00\x00")},
		{"FileNameTooLong", true, []byte("\x50\x4b\x03\x04\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x54\x65\x73\x74\x42\x6f\x64\x79\x50\x4b\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x01\x00\x20\x00\x00\x00\x00\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x50\x4b\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00\x36\x00\x00\x00\x2e\x00\x00\x00\x00\x00")},
		{"ExtraFieldTooLong", true, []byte("\x50\x4b\x03\x04\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x54\x65\x73\x74\x42\x6f\x64\x79\x50\x4b\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\x08\x00\xff\x00\x00\x00\x00\x00\x01\x00\x20\x00\x00\x00\x00\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x50\x4b\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00\x36\x00\x00\x00\x2e\x00\x00\x00\x00\x00")},
		{"FileCommentTooLong", true, []byte("\x50\x4b\x03\x04\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x54\x65\x73\x74\x42\x6f\x64\x79\x50\x4b\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\x22\x4b\x7c\x59\xe7\x03\xfa\xb6\x08\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\xff\x00\x00\x00\x01\x00\x20\x00\x00\x00\x00\x00\x00\x00\x74\x65\x73\x74\x2e\x74\x78\x74\x50\x4b\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00\x36\x00\x00\x00\x2e\x00\x00\x00\x00\x00")},
	}

	for _, c := range testcases {
		t.Run(c.name, func(t *testing.T) {
			file, err := afero.TempFile(appFs, "", c.name)
			if err != nil {
				t.Fatalf("afero.TempFile returned error: %v", err)
			}
			_, err = file.Write(c.data)
			if err != nil {
				t.Fatalf("afero.Write returned error: %v", err)
			}
			_, err = NewZipDir(c.name, file)
			if err == nil && c.expectErr {
				t.Errorf("NewZipDir should have returned error but didn't")
			} else if err != nil && !c.expectErr {
				t.Errorf("NewZipDir should not have returned error but did: %v", err)
			}
		})
	}
}
